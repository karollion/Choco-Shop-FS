// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Size {
  S
  M
  L
  XL
  XXL
}

model Product {
  id          String          @id @default(uuid())
  name        String
  price       Int
  size        Size            @default(S)
  description String
  category    String
  isNew       Boolean
  photo       String

  order       Order[]
}

model Order {
  id          String          @id @default(uuid())
  quantity    Int
  description String?

  product     Product         @relation(fields: [productId], references: [id])
  productId   String
  user        User            @relation(fields: [userId], references: [id])
  userId      String
  confirmOrder    OrderOnConfirm[]

  @@index([productId], name: "idx_productId")
  @@index([userId], name: "idx_userId")
}

// ---------- Confirm Orders ------------- //

model ConfirmOrder {
  id          String          @id @default(uuid())
  fName       String
  lName       String
  address     String
  phone       String
  email       String

  user        User            @relation(fields: [userId], references: [id])
  userId      String?
  orders      OrderOnConfirm[]
}

model OrderOnConfirm {
  order       Order @relation(fields: [orderId], references: [id])
  orderId     String 
  confirm     ConfirmOrder @relation(fields: [confirmId], references: [id])
  confirmId   String 

  @@id([orderId, confirmId])

  @@index([orderId], name: "idx_orderId")
  @@index([confirmId], name: "idx_confirmId")
}

// ---------- Users ---------- //

enum Role {
  USER
  ADMIN
}

model User {
  id       String    @id @default(uuid())
  email    String    @unique
  role     Role      @default(USER)
  password Password?

  order         Order[]
  confirmOrder  ConfirmOrder[]
}

model Password {
  id       String @id @default(uuid())
  hashedPassword String
  user     User   @relation(fields: [userId], references: [id])
  userId   String @unique
}